MITMS -- A tool for synthesizing quantum circuits based on the
         "meet-in-the-middle" algorithm (arXiv:1206.0758)

Written by Matthew Amy

We kindly request that anyone using this code to synthesize circuits
acknowledges the tool and/or the paper on which it is based in their work

BUILD
------------------------------

To build mitms, run make in the top level folder.

mitms requires the following libraries to be installed:

-- Lapack
-- Blas
-- Lapack++

Lapack and Blas (I forget whether they're separate) can be a massive pain
to compile, so if you can get them through your package manager, that is
much preferred.

Lapack++ can be found on sourceforge by searching either lapack++ or lapackpp.
Compiling it shouldn't be too difficult, but if you install it outside of
/usr or /usr/local you may have to modify the makefile

Additionally, if your compiler doesn't support the c++0x/c++11 standard,
you'll need to change HAS_HASH in configs.h to "false" and remove the std=c++0x
flag from the Makefile.


USAGE
------------------------------
Run mitms with
  mitms [options] <circuit-label>

The options are documented in mitms -help. Not all of them will work with one
another, and certain combinations may break the program. Most of the options
are experiments and shouldn't be of much concern to most users anyways.

The standard use case is to exactly synthesize a unitary over the ring 
Z[1/sqrt(2), i], which due to recent results admits a factorization over
Clifford group gates and the T-gate. To synthesize such a unitary, you must
first have a circuit over Clifford group and T gates with arbitrarily many
controls -- this circuit must be added to the file "searches" with the
following syntax:
  
  <circuit-label> <number of qubits>
  <circuit>

The circuit format should be easy to figure out by looking at the other
circuits, but basically you write which gate is being applied at each stage
(I, H, T, S, X, Y, Z and S*, T* for their inverses, or C(i) for a control on
the gate performed on qubit #i). Also, the last stage must have no spaces after
any of the gates.

When mitms is run with <circuit-label>, it will find the circuit in "searches",
compute the unitary representation over Z[1/sqrt(2), i], then perform the
search. Circuits implementing the unitary over Clifford + T are returned in
order of increasing depth.

-------------------------------
Another possibility is to use this tool to approximate unitaries. The idea is
documented in the author's Master's thesis "Algorithms for the Optimization
of Quantum Circuits." It uses a vantage-point tree to perform nearest neighbour
searches in the space of unitaries over Z[1/sqrt(2), i].

To approximate a unitary over Z[1/sqrt(2), i], run

  mitms [options] -approximate <circuit-label>

Alternately, you can approximate a rotation matrix of the form 
diag(1, e^i*PI *(n/d)) with the following option

  mitms [options] -rotation n d

mitms will repeatedly search for better approximations, with the default
precision starting at 1. To specify a different default precision, use the 
option "-precision k" which searches for approximations with distance at most
1x10^(-k) in the frobenius norm. The operator norm can be used instead by 
adding the option "-frobenius"

-------------------------------
Mitms includes a utility to compute unitaries from a .qc circuit. To use mitms
in this way execute
  
  mitms -matrix

and feed it a .qc circuit on standard input.

-------------------------------
Some other options that may be of interest to the general population include:

  "-no-phase"     if you want all results to have the correct global phase
                  (this is important if you're decomposing a controlled circuit)
  "-tdepth"       if you want T-depth optimal decompositions. There are much
                  better algorithms out there for this (arXiv:1210.0974)
  "-threads n"    to specify the number n of threads to run on
  "-ancilla n"    to decompose unitaries using n ancillas
  "-paulis"       if you want to include the pauli group in searches
  "-no-serialize" if you don't want to store circuit database on disk

-------------------------------
As one other point, circuit databases are by default stored on disk in the 
libraries folder, so that they don't have to be generated each time a search is
made. You should exercise caution as these databases can be large, and I
haven't implemented any sort of filesystem checks.

This README is far from complete, so please feel free to email me at 
matt.e.amy@gmail.com if you have any questions or if you find any bugs.
