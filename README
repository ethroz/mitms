MITMS -- A tool for synthesizing quantum circuits based on the
         "meet-in-the-middle" algorithm (arXiv:1206.0758)

Written by Matthew Amy

We kindly request that anyone using this code to synthesize circuits
acknowledges the tool and/or the paper on which it is based in their work

Modified by ethroz

SETUP
------------------------------

Before building the mitms code, one must first install:
-- Lapack
-- Blas
-- Lapack++

Alternatively, there is a script which will install and setup everything:
  ./setup.sh

BUILD
------------------------------

This project must be built with cmake. To do so, run these commands from the
root of the repository:
  cmake -S . -B build
  cmake --build build --config Release

USAGE
------------------------------

Run the original mitms program with:
  ./build/mitms_original [options] <circuit-label>

And run the new and improved mitms program with:
  ./build/mitms_parallel [options] <circuit-label>

The options are documented in the -help menu. Not all of them will work with
one another, and certain combinations may break the program. Most of the
options are experiments and shouldn't be of much concern to most users anyways.

The recommended way to see the difference between the two programs is as
folows:
  ./build/mitms_parallel -no-serialize -no-equiv-checks -threads <num-threads> -early-stop <circuit-label>

Alternatively, to compare the two programs, run the python script:
  python3 ./compare_runtime.py <circuit-label> --threads=<num-threads> --times=<num-times>

Example:
  python3 ./compare_runtime.py W --threads=6 --times=5  

-------------------------------

Another possibility is to use this tool to approximate unitaries. The idea is
documented in the author's Master's thesis "Algorithms for the Optimization
of Quantum Circuits." It uses a vantage-point tree to perform nearest neighbour
searches in the space of unitaries over Z[1/sqrt(2), i].

To approximate a unitary over Z[1/sqrt(2), i], run

  mitms [options] -approximate <circuit-label>

Alternately, you can approximate a rotation matrix of the form 
diag(1, e^i*PI *(n/d)) with the following option

  mitms [options] -rotation n d

mitms will repeatedly search for better approximations, with the default
precision starting at 1. To specify a different default precision, use the 
option "-precision k" which searches for approximations with distance at most
1x10^(-k) in the frobenius norm. The operator norm can be used instead by 
adding the option "-frobenius"

-------------------------------
Mitms includes a utility to compute unitaries from a .qc circuit. To use mitms
in this way execute
  
  mitms -matrix

and feed it a .qc circuit on standard input.

-------------------------------
Some other options that may be of interest to the general population include:

  "-no-phase"     if you want all results to have the correct global phase
                  (this is important if you're decomposing a controlled circuit)
  "-tdepth"       if you want T-depth optimal decompositions. There are much
                  better algorithms out there for this (arXiv:1210.0974)
  "-threads n"    to specify the number n of threads to run on
  "-ancilla n"    to decompose unitaries using n ancillas
  "-paulis"       if you want to include the pauli group in searches
  "-no-serialize" if you don't want to store circuit database on disk

-------------------------------
As one other point, circuit databases are by default stored on disk in the 
libraries folder, so that they don't have to be generated each time a search is
made. You should exercise caution as these databases can be large, and I
haven't implemented any sort of filesystem checks.

This README is far from complete, so please feel free to email me at 
matt.e.amy@gmail.com if you have any questions or if you find any bugs.
